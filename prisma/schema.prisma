generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String   // Added password field for authentication
  phone     String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders        Order[]
  cartItems     CartItem[]
  prescriptions Prescription[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id                    String  @id @default(cuid())
  name                  String
  description           String
  price                 Float
  discountPrice         Float?
  stock                 Int
  category              String
  manufacturer          String
  dosage                String?
  activeIngredient      String?
  requiresPrescription  Boolean @default(false)
  imageUrl              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  categoryRef Category    @relation(fields: [category], references: [name])
  orderItems  OrderItem[]
  cartItems   CartItem[]

  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  shippingAddress String
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  prescriptionUrl String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  auditLogs AuditLog[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("cart_items")
}

model Prescription {
  id          String             @id @default(cuid())
  userId      String
  orderId     String?
  fileUrl     String
  fileName    String
  status      PrescriptionStatus @default(PENDING)
  reviewedBy  String?
  reviewNotes String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("prescriptions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  orderId   String?
  action    String
  details   String?
  createdAt DateTime @default(now())

  // Relations
  user  User   @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("audit_logs")
}

enum UserRole {
  CUSTOMER
  ADMIN
  STAFF
  DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PrescriptionStatus {
  PENDING
  APPROVED
  REJECTED
}
